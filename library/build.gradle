apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode = projectVersionCode
        versionName = projectVersionName
        project.version = android.defaultConfig.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

group = libGroupId
version = projectVersionName

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId libGroupId
            artifactId libArtifactId
            name libName
            description libDescription
            url libUrl
            licenses {
                license {
                    name libLicenseName
                    url libLicenseUrl
                }
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
            scm {
                connection libGit
                developerConnection libGit
                url libUrl
            }

        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties();
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = properties.getProperty("bintray.repo")
        name = libGroupId + "." +  libArtifactId
        desc = libDescription
        websiteUrl = libUrl
        vcsUrl = libGit
        licenses = libLicenses
        dryRun = false
        publish = true
        override = false
        publicDownloadNumbers = true
        userOrg = properties.getProperty("bintray.organisation")
        version {
            name = projectVersionName
            desc = libDescription
            vcsTag = projectVersionCode
            gpg {
                sign = true
                passphrase = properties.getProperty("bintray.gpg_passphrase")
            }
        }
    }
}
